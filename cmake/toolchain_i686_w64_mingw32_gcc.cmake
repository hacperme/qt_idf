# TOOLCHAIN EXTENSION
IF(WIN32)
    set(TOOLCHAIN_EXT ".exe")
ELSE()
    set(TOOLCHAIN_EXT "")
ENDIF()

# TOOLCHAIN_DIR AND NANO LIBRARY
set(TOOLCHAIN_DIR ${SDK_BASE}/tools/mingw32)
STRING(REGEX REPLACE "\\\\" "/" TOOLCHAIN_DIR "${TOOLCHAIN_DIR}")

MESSAGE(STATUS "TOOLCHAIN_DIR: " ${TOOLCHAIN_DIR})

# TARGET_TRIPLET
IF(WIN32)
set(TARGET_TRIPLET "i686-w64-mingw32")
ELSE()
    set(TARGET_TRIPLET "")
ENDIF()

set(TOOLCHAIN_BIN_DIR ${TOOLCHAIN_DIR}/bin)
set(TOOLCHAIN_INC_DIR ${TOOLCHAIN_DIR}/${TARGET_TRIPLET}/include)
set(TOOLCHAIN_LIB_DIR ${TOOLCHAIN_DIR}/${TARGET_TRIPLET}/lib)


set(CMAKE_C_COMPILER ${TOOLCHAIN_BIN_DIR}/gcc${TOOLCHAIN_EXT})
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_BIN_DIR}/g++${TOOLCHAIN_EXT})
set(CMAKE_ASM_COMPILER ${TOOLCHAIN_BIN_DIR}/gcc${TOOLCHAIN_EXT})
set(CMAKE_OBJCOPY ${TOOLCHAIN_BIN_DIR}/objcopy CACHE INTERNAL "objcopy tool")
set(CMAKE_OBJDUMP ${TOOLCHAIN_BIN_DIR}/objdump CACHE INTERNAL "objdump tool")
set(CMAKE_LINKER ${TOOLCHAIN_BIN_DIR}/ld${TOOLCHAIN_SUFFIX})
set(SIZE ${TOOLCHAIN_BIN_DIR}/size${TOOLCHAIN_SUFFIX})
# set(CMAKE_MAKE_PROGRAM ${TOOLCHAIN_BIN_DIR}/mingw32-make${TOOLCHAIN_SUFFIX})


set(CMAKE_C_COMPILER_FORCED TRUE)
set(CMAKE_CXX_COMPILER_FORCED TRUE)

set(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_DIR}/${TARGET_TRIPLET} ${EXTRA_FIND_PATH})

# search for programs in the build host directories
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)